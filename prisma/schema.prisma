// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // opt in to new Prisma features, in cascasding deletes
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  profile   Profile? // ? allows profile to be null, so it can be created afterwards.
  post      Post[]
  comment   Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Profile {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
  firstName  String
  lastName   String
  age        Int
  pictureUrl String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  content     String
  imageUrl    String
  publishedAt DateTime? // ? allows the value to be null
  userId      Int?
  // cascade in line below means if the user is deleted, all linked posts will be deleted as well
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment     Comment[]
  category    Category[] // this is one side of an implicit many to many
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Comment {
  id        Int       @id @default(autoincrement())
  parentId  Int? // parent id is the id of the OP
  parent    Comment?  @relation("ParentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("ParentReplies")
  content   String
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  postId    Int?
  post      Post?     @relation(fields: [postId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  post      Post[] // this is the other side of an implicit many to many
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
